<h1>About</h1>
<p>此內容管理系統以 <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作.</p>
<h4>利用 cmsimde 建立靜態網誌方法:</h4>
<p>1. 在 github 建立倉儲, git clone 到近端</p>
<p>2. 參考 <a href="https://github.com/mdecourse/newcms">https://github.com/mdecourse/newcms</a>, 加入除了 cmsimde 目錄外的所有內容</p>
<p>以 git submodule add <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> cmsimde</p>
<p>建立 cmsimde 目錄, 並從 github 取下子模組內容.</p>
<p>3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器.</p>
<p>動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端.</p>
<p>4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行:</p>
<p>git clone --recurse-submodules <a href="https://github.com/mdecourse/newcms.git">https://github.com/mdecourse/newcms.git</a></p>
<h1>Develop</h1>
<p><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443 就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容.</p>
<p>cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版.</p>
<p>init.py 位於  up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.</p>
<h1>Week</h1>
<p>每周進度更新與定期檢查進度</p><h2>week2</h2>
<p>升級python 3.8.2版本</p>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="600" src="//www.youtube.com/embed/E7bvIMTSTSg" width="700"></iframe></p>
<p>以上為升級python3.8.2之影片</p>
<p><span style="color: #ff0000;">步驟1:</span></p>
<p>前往python官網並下載指定版本</p>
<p></p>
<p><img alt="" height="376" src="/images/chrome_ECTUUEYqdg.png" width="900"/></p>
<p><span style="color: #ff0000;">步驟2:</span></p>
<p>打開python 3.8.2下載好之檔案，點選<span style="color: #ff6600;">customize installation<span style="color: #000000;">，並按下一步</span></span></p>
<p><span style="color: #ff6600;"><span style="color: #000000;">將pip選項取消掉，按下一步</span></span></p>
<p><span style="color: #ff6600;"><span style="color: #000000;"><img alt="" height="396" src="/images/explorer_YP4KRyJZ6t.png" width="674"/></span></span></p>
<p><span color="#000000" style="color: #000000;">檔案位置點選Y槽按自己創建出來的空檔按夾P382</span></p>
<p><span color="#000000" style="color: #000000;"><img alt="" height="410" src="/images/python-3.8.2-amd64_PeEQgHskJt.png" width="667"/></span></p>
<p>並開始安裝</p>
<p><img alt="" height="410" src="/images/python-3.8.2-amd64_3VoxtR9Irw.png" width="666"/></p>
<p><span style="color: #ff0000;">步驟3:</span></p>
<p>將start.bat抓到SciTe裡編輯檔案位置(原先為p73改成p382)</p>
<p><img alt="" height="215" src="/images/explorer_eER0GKZOkc.png" width="664"/></p>
<p>以下為文字編輯器中的程式碼(為start.bat之內容)</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">@echo off
set Disk=y
subst %Disk%: "data"
 
%Disk%:
 
set HomePath=%Disk%:\home_mdecourse
set HomeDrive=%Disk%:\home_mdecourse
set Home=%Disk%:\home_mdecourse
set USERPROFILE=%Disk%:\home_mdecourse
 
REM 將系統 Python 程式的 io 設為 utf-8
set PYTHONIOENCODING="utf-8"
 
set PYTHONPATH=%Disk%:\\DLLs;%Disk%:\py382\Lib;%Disk%:\py382\Lib\site-packages;
set PYTHONHOME=%Disk%:\py382
 
set path_python=%Disk%:\py382;%Disk%:\py382\Scripts;
set path_msys2=%Disk%:\msys64\mingw64\bin;
REM coreutils is for compiling fossil scm
set path_coreutils=%Disk%:\coreutils-5.3.0\bin;%Disk%:\depends22_x64;
set path_tcc=%Disk%:\tcc;
set path_cmake=%Disk%:\cmake-3.10.1-win64-x64\bin;
set path_nodejs=Disk%:\nodejs;%Disk%:\nodejs\appdata\roaming\npm;
set path_git=%Disk%:\portablegit\bin;
set path_xming=%Disk%:\Xming;
set path_latex=%%Disk%:\Pandoc;%Disk%:\TinyTeX\bin\win32;
 
path=%Disk%:;%path_python%;%path_msys2%;%path_tcc%;%path_git%;%path_cmake%;%path_coreutils%;
 
start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe
 
start /MIN %Disk%:\wscite415\wscite\SciTE.exe
start /MIN %Disk%:\wscite415\wscite\SciTE.exe
 
Exit</pre>
<p><span style="color: #ff0000;">步驟4:</span></p>
<p>完成以上步驟後，按取stop.bat使程式重新讀取</p>
<p><span style="color: #ff0000;">步驟5:</span></p>
<p>安裝完成後，打入程式碼(<span style="color: #ff6600;">pip install 模組名稱</span>)，以安裝剩餘未再啟動程式中的模組</p>
<p>依序安裝順序為</p>
<p><span style="color: #ff6600;">1-flask</span></p>
<p><span style="color: #ff6600;">2-markdown</span></p>
<p><span style="color: #ff6600;">3-bcml</span></p>
<p><span style="color: #ff6600;">4-bs4</span></p>
<p><span style="color: #ff6600;">5-flask_cors</span></p>
<p><span style="color: #ff6600;">6-pelican</span></p>
<p><span style="color: #ff6600;">7-leo</span></p>
<p></p><h2>week3</h2>
<p>看完CoppeliaSim之心得:</p>
<p>首先簡略瀏覽關於coppeliaSim用戶手冊中所負責的部分區域檢視，大略看過標題及裡面分支出來的內容後，針對使用介面之解說有做進一步了解，甚至有做出特定使用者介面使少數特定族群受惠，對於視圖與位置操作方向也詳細說明並加入快捷鍵使用方式以及命令行的詳細解說。</p>
<p>僅看第一個標題的內容就發現到以上幾個需要特別注意的重點，剩餘兩個標題所表達之內容便偏向於外部環境設定與模組方面的專業知識，藉由圖例所輔助說明能較為知道手冊所想表達的意涵，也能修正對於單單只看文字而想像出操作步驟與有附真實圖例比較之下的差異性，並導正之間所產生的誤會，也可以從而對內容加深印象。</p>
<p>雖然負責的部分只有三個標題你的內容，不過卻蘊含這麼多需要注意的細節，也覺得不管是哪個部分都很重要，未來也會和隊友相互交流知道的資訊，以能平衡之間未能負責的區域內容。</p>
<p><span style="color: #ff6600;">1-使用者介面(包含快捷鍵、視圖與頁面、命令列、操作方向與位置)</span></p>
<p><span style="color: #ff6600;">2-場景與模組</span></p>
<p><span style="color: #ff6600;">3-環境設定</span></p>
<p></p><h2>week4</h2>
<p>需製作分組報告3-5頁，使用pdf檔上傳。</p>
<h2>week5</h2>
<p>在我負責之部分第一項目首先講解到如何開始使用Webots的畫面與視窗，雖然這整本電子書都是在解說Webots介面使用，但在實際使用方面卻有所差別，以下為首要大略提到的標題及小標題的重點與補充說明。</p>
<p><span style="color: #ff0000;">章節一；開始操作Webots</span></p>
<p>目錄:</p>
<p><img alt="" height="651" src="/images/chrome_2020-04-05_21-44-35.png" width="904"/><span style="color: #ff0000;">介紹Webots </span></p>
<p><br/><span style="color: #333399;">原文重點:</span></p>
<p><span style="color: #ff6600;">1</span>-It offers a rapid prototyping environment, that allows the user to create 3D virtual worlds with physics properties such as mass, joints, friction coefficients, etc.<br/> <span style="color: #ff6600;">2</span>-The user can add simple passive objects or active objects called mobile robots. These robots can have different locomotion schemes (wheeled robots, ，legged robots, or flying robots).<br/> <span style="color: #ff6600;">3</span>-Webots is well suited for research and educational projects related to mobile robotics. <br/> <span style="color: #ff6600;">4</span>-even if you don't know these languages, you can still program the e-puck and Hemisson robots using a simple graphical programming language called<br/> <span style="color: #ff6600;">5</span>-If you don't want to use existing robot models provided within Webots and would like to create your own robot models, or add special objects in the simulated environments, you will need a basic knowledge of 3D computer graphics and VRML97 description language. <br/> <span style="color: #ff6600;">6</span>- A world file doesn't contain the controller code of the robots; it only specifies the name of the controller that is required for each robot. <br/> <span style="color: #ff6600;">7</span>-it can execute operations that can normally only be carried out by a human operator and not by a real robot. </p>
<p><span style="color: #333399;">中文概略解說:</span></p>
<p>提供模擬環境，使用戶可創建物理特性(質量、摩擦係數等等)的3D虛擬世界，可添加各種不同輪型、飛行等機器人在景象中，且配備感測器、執行設備等(攝像機、馬達、接收器等)，也可對機器人做單獨編程。</p>
<p>包含大量機械人模型與程式控制器範例包(可將程式轉移到e-puck，DARwIn-OP等真實機器人)，以幫助用戶熟Webots 。</p>
<p><span style="color: #ff6600;">Webots在機器人技術上有一定程度的依靠，例如:移動機器人原型製作、多主體研究、教授機器人技術、機器人競賽等等涉略範圍。</span></p>
<p>即使不知道python、c++、java等程式編碼的知識，依然可以使用BotStudio程式編碼器對機器人編輯。<br/>如果不喜歡模組中原有的機器人範例包，也可另外使用3D、VRML97描述語言的程式來創建模型並導入。<br/> <br/><span style="color: #ff6600;">Webots模擬組成條件:</span><br/> <span style="color: #ff0000;">1</span>-.wbt副檔名，定義多個既器人與環境，取決於外部(proto)，檔案儲存在每個Webots項目裡worlds子目錄中。<br/> <span style="color: #ff0000;">2</span>-在c++可進行修改可選之物理插件。<br/> <span style="color: #ff0000;">3</span>-機器人都由程式控制程序組成(python、c++、java)。<br/> <span style="color: #ff0000;">4</span>-對於環境中物件之方向、位置、形狀、顏色、亮度會仔細編輯。<br/> <span style="color: #ff0000;">5</span>-關節本身包含一個攝像頭，但World文件不包含機器人控制器代碼，只有指定每個機器人所需控制器名稱。</p>
<p><br/>管理者可執行是因為操作者正在執行的關係，並不是由機器人執行操作，適合任何編碼語言，但與常規控制器來說管理者將有權使用特權操作(包含模擬控制)。</p>
<p>開始Webots之操作</p>
<p>使用者介面</p>
<p>3D視窗</p>
<p>情景樹</p>
<p>優先選項</p>
<p>Webots傳訊</p>
<p>電腦設備</p>
<p></p>
<p></p>
<p></p><h1>problem</h1>
<p><span style="color: #ff6600;">Q1</span>在下載倉儲後進入近端時wsgi.py並不在該檔案夾中，且無法啟動近端</p>
<p><span style="color: #ff6600;">A</span>由於倉儲在下載時並沒有更新，因此在CODE中可打以下兩行指令進行資料更新推進</p>
<p><span style="color: #ff6600;">1-git submodule init</span></p>
<p><span style="color: #ff6600;">2-git submodule update</span></p>
<p>打完後便會更新檔案夾中的資料，會出現wsgi.py啟動檔案，即可正常進入近端</p>
<p></p>
<p></p>
<p><span style="color: #ff6600;">Q2<span style="color: #000000;">為何正常操作近端資料即將上傳時卻無法git add也無法正常推送改版動作</span></span></p>
<p><span style="color: #ff6600;"><span style="color: #000000;"><span style="color: #ff6600;">A</span>在經過再三嘗試下重新下載該倉儲網址並重新進入近端並加以改寫後重新推送，即可修正錯誤。</span></span></p>
<p><span style="color: #ff6600;"><span style="color: #000000;"><span style="color: #ff6600;">原因</span>:有可能因為重複進入近端的關係造成網頁識別錯誤，無法得知最新改版因此將推送的資料阻擋，並產生衝突(因為重複開啟近端網頁的緣故)</span></span></p>
<p><span style="color: #ff6600;"><span style="color: #000000;"><img alt="" height="450" src="/images/1.png" width="900"/></span></span></p>
<p><span color="#000000" style="color: #000000;">以上為推送錯誤範例</span></p>
<p></p>
<p><img alt="" height="431" src="/images/2.png" width="900"/><img alt="" height="431" src="/images/3.png" width="900"/></p>
<p>上圖為git add 指令所產生錯誤</p>